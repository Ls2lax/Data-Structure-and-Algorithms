/* 
 Author Laxman Sharma
 DFS traversal
 input format
 V --> no. of vertices
 E --> no. of edges
 next E line contains
 u, v there is edge between u to v
 edges are undirected.
*/

#include<bits/stdc++.h>
using namespace std;
void dfs(int s, vector<int> adj[],vector<bool> &vis, vector<int> &ans) {
    if(vis[s]) {
        return;
    }
    vis[s] = true;
    ans.push_back(s);
    for(int i=0;i<adj[s].size();i++) {
        dfs(adj[s][i],adj,vis,ans);
    }
}
class Solution {
  public:
    // Function to return a list containing the DFS traversal of the graph.
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        vector<int> ans;
        //return ans;
        vector<bool> vis(10001, false);
        dfs(0, adj, vis, ans);
        return ans;
    }
};

int main() {
	int V, E;
	cin>>V>>E;
	vector<int> adj[V];
	for(int i=0;i<E;i++) {
		int u,v;
		cin>>u>>v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	Solution obj;
	vector<int> ans = obj.dfsOfGraph(V, adj);
	for(int val: ans) {
		cout<<val<<" ";
	}
}
